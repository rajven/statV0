#!/bin/bash

CONFIG="/home/stat/stat.conf"

[ -f ${CONFIG} ] && . ${CONFIG} || { echo "Config file ${CONFIG} not found!"
    exit 1
    }

TC=/sbin/tc
MAXBANDWIDTH="10Mbit"

MINBURST=4096
BURST_DEFAULT=15000

QUANTUM_DEFAULT=1514
QUANTUM_MIN=${QUANTUM_DEFAULT}
QUANTUM_MAX=60000

SHAPER_LIST="$WORKDIR/shaper.classes"
IPTABLES_SHAPER="$WORKDIR/iptables2/shaper"

R2Q=10

calc_burst() {    
# calc burst buffer.    
B=${BURST_DEFAULT}     
BANDVALUE=`echo $1 | grep Mbit | sed 's/Mbit//'`    
[ -n "${BANDVALUE}" ] && B=`expr $BANDVALUE \* 2048` || {   
    BANDVALUE=`echo $1 | grep Kbit | sed 's/Kbit//'` 
    [ -n "${BANDVALUE}" ] && B=`expr $BANDVALUE \* 2`
    }      
[ ${B} -lt ${MINBURST} ] && B=${MINBURST} 
eval "BURST=${B}"     
}   

calc_quantum() {  
# calc burst buffer.    
Q=${QUANTUM_DEFAULT}   
BANDVALUE=`echo $1 | grep Mbit | sed 's/Mbit//'`     
#Quantum=Band in Bps/r2q.  
[ -n "${BANDVALUE}" ] && Q=`expr $BANDVALUE \* 125000 \/ ${R2Q}` || {      
  BANDVALUE=`echo $1 | grep Kbit | sed 's/Kbit//'`
  [ -n "${BANDVALUE}" ] && Q=`expr $BANDVALUE \* 125 \/ ${R2Q}` 
  }     
[ $Q -lt ${QUANTUM_MIN} ] && Q=${QUANTUM_MIN}
[ $Q -gt ${QUANTUM_MAX} ] && Q=${QUANTUM_MAX}  
eval "QUANTUM=${Q}"      
}  
   
function init_shaper {
#create default root class for interface
do_exec "$TC qdisc add dev $1 root handle 1 htb default 10 r2q 100 >/dev/null 2>&1"
do_exec "$TC class add dev $1 parent 1: classid 1:2 htb rate $MAXBANDWIDTH ceil $MAXBANDWIDTH burst 2000k >/dev/null 2>&1"
do_exec "$TC qdisc add dev $1 parent 1:2 handle 2 sfq perturb 10 >/dev/null 2>&1"
}

function clear_shapers {
CLASSLIST=`$TC class show dev $1 | grep parent | awk '{ print $3 }' | awk -F: '{ print $2 }' | sort --numeric-sort`
log_debug "Get current class list for dev $1"
log_debug "${CLASSLIST}"
log_info "Remove all tc settings from interface $1"

# remove any filters from this interface
[ "$1" == $WAN ] && {
    do_exec "$TC filter del dev $1 parent 1:0 protocol ip prio 50 fw >/dev/null 2>&1"
    log_debug "Remove iptables rules"
    do_exec "$IPTABLES -t mangle -F _SHAPER"
    do_exec "$IPTABLES -t mangle -F _SHAPER_IN"
    do_exec "$IPTABLES -t mangle -F _SHAPER_OUT"
    do_exec "rm -f $IPTABLES_SHAPER"
    } || {
    do_exec "$TC filter del dev $1 parent 1:0 protocol ip prio 50 u32 >/dev/null 2>&1"
    }

# remove any class from this interface 
for C in $CLASSLIST;
do
do_exec "$TC class del dev $1 parent 1:2 classid 1:$C >/dev/null 2>&1"
do_exec "$TC qdisc del dev $1 parent 1:$C handle $C sfq perturb 10 >/dev/null 2>&1"
done

#remove default class
do_exec "$TC class del dev $1 parent 1: classid 1:2 htb rate $MAXBANDWIDTH ceil $MAXBANDWIDTH burst 2000k >/dev/null 2>&1"
do_exec "$TC qdisc del dev $1 parent 1:2 handle 2 sfq perturb 10 >/dev/null 2>&1"
do_exec "$TC qdisc del dev $1 root handle 1 htb default 10 r2q 100 >/dev/null 2>&1"

}


function clear_all {
LIST_LAN=`/sbin/ip addr show | grep inet | awk '{ print $7 }' | grep -v ":" | grep "^eth" | grep -v "$WAN"`
echo "${LIST_LAN}" | while read ETH; do
log_debug "Clear shapers from $ETH"
clear_shapers $ETH
done
log_debug "Clear shapers from $WAN"
clear_shapers $WAN
log_info "Remove current config files"
do_exec "rm -f $WORKDIR/users >/dev/null 2>&1"
do_exec "rm -f $SHAPER_LIST >/dev/null 2>&1"
}


function int_dec {
STEP=1
[ $2 ] && STEP=$2
VAL=$1
[ -z $VAL ] && {
    eval "RET=0"
    return
    }
[ $VAL -gt 1 ] && {
    D=`echo $VAL - $STEP | bc`
    eval "RET=$D"
    return
    } || { 
    eval "RET=0"
    return
    }
}

function check_shapers {
IPTABLES_WAN=`/sbin/iptables-save | grep MARK | wc -l`
log_debug "Current count rules iptables $IPTABLES_WAN"
[ $IPTABLES_WAN -eq 0 ] && {
    log_error "iptables rules for shaper not found!"
    eval "SHAPER_ERR=2"
    return
    }
log_info "Current shaper state valid."
eval "SHAPER_ERR="
}

function check_init {
CLASS_COUNT=`$TC class show dev $1 | wc -l`
eval "ETH_INIT=$CLASS_COUNT"
}

function recreate_iptables {
do_exec "$IPTABLES -t mangle -F _SHAPER"
do_exec "$IPTABLES -t mangle -F _SHAPER_IN"
do_exec "$IPTABLES -t mangle -F _SHAPER_OUT"
while read IPT; do
do_exec "$IPTABLES -t mangle $IPT"
done <$IPTABLES_SHAPER
}

function add_class {
calc_burst $3
calc_quantum $3

do_exec "$TC class add dev $1 parent 1:2 classid 1:$2 htb rate 64Kbit prio 100 ceil ${3}Kbit burst $BURST quantum $QUANTUM >/dev/null 2>&1"
do_exec "$TC qdisc add dev $1 parent 1:$2 handle $2 sfq perturb 10 >/dev/null 2>&1"

[ "$1" == $WAN ] && {
    do_exec "$TC filter add dev $1 parent 1:0 protocol ip prio 50 handle $2 fw classid 1:$2 >/dev/null 2>&1"
    } || {
    do_exec "$TC filter add dev $1 parent 1:0 protocol ip prio 50 u32 match ip src $4 match ip dst $5 classid 1:$2 >/dev/null 2>&1"
    }
}

function add_class_ipt {
calc_burst $3
calc_quantum $3
do_exec "$TC class add dev $1 parent 1:2 classid 1:$2 htb rate 64Kbit prio 100 ceil ${3}Kbit burst $BURST quantum $QUANTUM >/dev/null 2>&1"
do_exec "$TC qdisc add dev $1 parent 1:$2 handle $2 sfq perturb 10 >/dev/null 2>&1"
do_exec "$TC filter add dev $1 parent 1:0 protocol ip prio 50 handle $2 fw classid 1:$2 >/dev/null 2>&1"
}

function del_class_ipt {
FH=`$TC filter show dev $1 | grep "classid 1:$2 " | awk '{ print $10 }'`
log_debug "filter list for class $2: $FH"
echo "${FH}" | while read FH1; do
	[ -n "${FH1}" ] && do_exec "$TC filter del dev $1 parent 1:0 protocol ip prio 50 handle $FH1 fw classid 1:$2 >/dev/null 2>&1"
done
do_exec "$TC class del dev $1 parent 1:2 classid 1:$2 >/dev/null 2>&1"
do_exec "$TC qdisc del dev $1 parent 1:$2 handle $2 sfq perturb 10 >/dev/null 2>&1"
T1=`mktemp -t ipt.XXXXXX`
IPT_CMD=`cat $IPTABLES_SHAPER | grep -v \"$1 -s $3 -d $4 -j MARK\" | sed 's/^-I/-D/'`

do_exec "cat $IPTABLES_SHAPER | grep -v \"$1 -s $3 -d $4 -j MARK\" >$T1"

[ -n "${IPT_CMD}" ] && do_exec "$IPTABLES -t mangle ${IPT_CMD} >/dev/null 2>&1"
do_exec "cat $T1 >$IPTABLES_SHAPER"
do_exec "rm -f $T1 >/dev/null 2>&1"
}

function del_class {
[ "$1" == "$WAN" ] && {
	FH=`$TC filter show dev $1 | grep "classid 1:$2 " | awk '{ print $10 }'`
	log_debug "filter list for class $2: $FH"
	echo "${FH}" | while read FH1; do
		[ -n "${FH1}" ] && do_exec "$TC filter del dev $1 parent 1:0 protocol ip prio 50 handle $FH1 fw classid 1:$2 >/dev/null 2>&1"
	done
	do_exec "$TC class del dev $1 parent 1:2 classid 1:$2 >/dev/null 2>&1"
	do_exec "$TC qdisc del dev $1 parent 1:$2 handle $2 sfq perturb 10 >/dev/null 2>&1"
	T1=`mktemp -t ipt.XXXXXX`
 do_exec "cat $IPTABLES_SHAPER | grep -v \"$1 -d $3 -s $4 -j MARK\" >$T1"
 do_exec "$IPTABLES -t mangle -D _SHAPER -o $1 -d $3 -s $4 -j MARK --set-mark $2 >/dev/null 2>&1"
	do_exec "cat $T1 >$IPTABLES_SHAPER"
	do_exec "rm -f $T1 >/dev/null 2>&1"
	} || {
	FH=`$TC filter show dev $1 | grep "flowid 1:$2 " | awk '{ print $10 }'`
	log_debug "filter list for class $2: $FH"
	echo "${FH}" | while read FH1; do
		[ -n "${FH1}" ] && do_exec "$TC filter del dev $1 parent 1:0 protocol ip prio 50 handle $FH1 u32 flowid 1:$2 >/dev/null 2>&1"
	done
	do_exec "$TC class del dev $1 parent 1:2 classid 1:$2 >/dev/null 2>&1"
	do_exec "$TC qdisc del dev $1 parent 1:$2 handle $2 sfq perturb 10 >/dev/null 2>&1"
	}
}

function sync_classes {
check_init ${WAN}
[ "${ETH_INIT}" == "0" ] && init_shaper ${WAN}

SHAPER_DATA=`cat $SHAPER_LIST`
echo "${SHAPER_DATA}" | while read USER_ID IP_SRC IP_DST NEWCLASSID_LAN NEWCLASSID_WAN DST_DEV BANDWIDTH; do

[ -z "$BANDWIDTH" ] && BANDWIDTH=`cat $WORKDIR/users | grep "^$USER_ID $IP_SRC $IP_DST" | awk '{ print $4 }'`

check_init "${DST_DEV}"
[ "${ETH_INIT}" == "0" ] && init_shaper "${DST_DEV}"

#find lan class
LAN_FIND=`$TC class show dev ${DST_DEV} | grep -v root | grep "1:$NEWCLASSID_LAN" | wc -l`
[ $LAN_FIND -eq 0 ] && {
	# add class to interface
	add_class $DST_DEV $NEWCLASSID_LAN $BANDWIDTH ${IP_SRC} ${IP_DST}
	log_info "Restored shaper - ID: $USER_ID IP_SRC: ${IP_SRC} IP_DST: ${IP_DST} Bandwidth: ${BANDWIDTH}Kbit CLASS: ${NEWCLASSID_LAN} DEV: ${DST_DEV}"
	}

#for wan 
[ "${IP_SRC}" == "0/0" -a "$NEWCLASSID_WAN" != "0" ] && {
	WAN_FIND=`$TC class show dev ${WAN} | grep -v root | grep "1:$NEWCLASSID_WAN" | wc -l`
	# add class to interface 
	[ $WAN_FIND -eq 0 ] && {
		add_class $WAN $NEWCLASSID_WAN $BANDWIDTH ${IP_SRC} ${IP_DST}
		log_info "Restored shaper - ID: $USER_ID IP_SRC: ${IP_SRC} IP_DST: ${IP_DST} Bandwidth: ${BANDWIDTH}Kbit CLASS: ${NEWCLASSID_WAN} DEV: ${WAN}"
		}
	}
done
}


function clear_uid {
USER_ID=$1
[ -z "${USER_ID}" ] && return
SHAPER_DATA=`cat ${SHAPER_LIST} | grep "^$USER_ID[[:space:]]"`
TMP1=`mktemp -t shaper.XXXXXXXXXX`
echo "${SHAPER_DATA}" | while read ID IP_SRC IP_DST CLASS_LAN CLASS_WAN DEV_DST BANDWIDTH; do
[ -z "$ID" ] && continue
log_info "Remove shaper with ID: $ID Source: ${IP_SRC} Dest: ${IP_DST} Class_lan: $CLASS_LAN Class_wan: $CLASS_WAN DEV: $DEV_DST BAND: ${BANDWIDTH}"
[ "$CLASS_LAN" != "0" ] && del_class $DEV_DST $CLASS_LAN $IP_SRC $IP_DST
[ "$CLASS_WAN" != "0" ] && del_class $WAN $CLASS_WAN $IP_SRC $IP_DST
do_exec "cat ${SHAPER_LIST} | grep -v \"^$USER_ID[[:space:]]$IP_SRC[[:space:]]$IP_DST[[:space:]]\" > ${TMP1}"
do_exec "cat ${TMP1} > ${SHAPER_LIST}"
done
do_exec "cat $WORKDIR/users | grep -v \"^$USER_ID[[:space:]]\" > ${TMP1}"
do_exec "cat ${TMP1} > $WORKDIR/users"
do_exec "rm -f ${TMP1}"
}

function clear_uid_by_dev {
DEV_DST=$1
[ -z "${DEV_DST}" ] && return
SHAPER_DATA=`cat ${SHAPER_LIST} | grep "[[:space:]]$DEV_DST[[:space:]]"`
[ -z "${SHAPER_DATA}" ] && SHAPER_DATA=`cat ${SHAPER_LIST} | grep "[[:space:]]$DEV_DST\$"`
[ -z "${SHAPER_DATA}" ] && return
UID_LIST=`echo "${SHAPER_DATA}" | awk '{ print \$1 }' | sort | uniq`
echo "${UID_LIST}" | while read ID; do
clear_uid $ID
done
}

do_exec "touch $IPTABLES_SHAPER"
